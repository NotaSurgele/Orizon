class Quadtree {
private:
    static const int MAX_OBJECTS_PER_NODE = 10;
    static const int MAX_LEVELS = 5;
    
    int level;
    vector<Entity*> objects;
    SDL_Rect bounds;
    Quadtree* nodes[4];
    
    bool IsLeafNode() const {
        return nodes[0] == nullptr;
    }
    
    void Split() {
        int subWidth = bounds.w / 2;
        int subHeight = bounds.h / 2;
        int x = bounds.x;
        int y = bounds.y;
        
        nodes[0] = new Quadtree(level + 1, { x + subWidth, y, subWidth, subHeight });
        nodes[1] = new Quadtree(level + 1, { x, y, subWidth, subHeight });
        nodes[2] = new Quadtree(level + 1, { x, y + subHeight, subWidth, subHeight });
        nodes[3] = new Quadtree(level + 1, { x + subWidth, y + subHeight, subWidth, subHeight });
    }
    
public:
    Quadtree(int level, SDL_Rect bounds) {
        this->level = level;
        this->bounds = bounds;
        for (int i = 0; i < 4; i++) {
            nodes[i] = nullptr;
        }
    }
    
    ~Quadtree() {
        for (int i = 0; i < 4; i++) {
            if (nodes[i]) {
                delete nodes[i];
            }
        }
    }
    
    void Clear() {
        objects.clear();
        for (int i = 0; i < 4; i++) {
            if (nodes[i]) {
                nodes[i]->Clear();
                delete nodes[i];
                nodes[i] = nullptr;
            }
        }
    }
    
    void Insert(Entity* entity) {
        if (IsLeafNode()) {
            objects.push_back(entity);
            if (objects.size() > MAX_OBJECTS_PER_NODE && level < MAX_LEVELS) {
                Split();
                for (auto& obj : objects) {
                    for (int i = 0; i < 4; i++) {
                        if (SDL_HasIntersection(&obj->getComponent<Position>()->rect, &nodes[i]->bounds)) {
                            nodes[i]->Insert(obj);
                        }
                    }
                }
                objects.clear();
            }
        } else {
            for (int i = 0; i < 4; i++) {
                if (SDL_HasIntersection(&entity->getComponent<Position>()->rect, &nodes[i]->bounds)) {
                    nodes[i]->Insert(entity);
                }
            }
        }
    }
    
    vector<Entity*> Retrieve(SDL_Rect area) {
        vector<Entity*> retObjects;
        if (IsLeafNode()) {
            for (auto& obj : objects) {
                if (SDL_HasIntersection(&obj->getComponent<Position>()->rect, &area)) {
                    retObjects.push_back(obj);
                }
            }
        } else {
            for (int i = 0; i < 4; i++) {
                if (SDL_HasIntersection(&nodes[i]->bounds, &area)) {
                    vector<Entity*> childObjects = nodes[i]->Retrieve(area);
                    retObjects.insert(retObjects.end(), childObjects.begin(), childObjects.end());
                }
            }
        }
        return retObjects;
    }
};
